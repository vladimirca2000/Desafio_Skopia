// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skopia.Data;

#nullable disable

namespace Skopia.Data.Migrations
{
    [DbContext(typeof(SkopiaDbContext))]
    [Migration("20250711172834_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Skopia.Domain.Entidades.ComentarioTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataComentario")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EstaDeletado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("QuandoDeletou")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TarefaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TarefaId");

                    b.ToTable("ComentariosTarefas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0000000-0000-0000-0000-000000000001"),
                            Conteudo = "Este é um comentário de exemplo para a tarefa.",
                            DataComentario = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            EstaDeletado = false,
                            TarefaId = new Guid("c0000000-0000-0000-0000-000000000001"),
                            UsuarioId = new Guid("a0000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.HistoricoAlteracaoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("CampoModificado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DataModificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EstaDeletado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("QuandoDeletou")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TarefaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValorAntigo")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValorNovo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TarefaId");

                    b.ToTable("HistoricosAlteracaoTarefa", (string)null);
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstaDeletado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("QuandoDeletou")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Projetos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Este é um projeto de exemplo para testes e demonstração de funcionalidades.",
                            EstaDeletado = false,
                            Nome = "Projeto Exemplo",
                            UsuarioId = new Guid("a0000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstaDeletado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("QuandoDeletou")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Tarefas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000001"),
                            DataCriacao = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Descrição detalhada da tarefa de exemplo, demonstrando como o seed pode preencher campos e estados iniciais.",
                            EstaDeletado = false,
                            Prioridade = 1,
                            ProjetoId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Status = 0,
                            Titulo = "Tarefa de Exemplo",
                            UsuarioId = new Guid("a0000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EstaDeletado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Funcao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("QuandoDeletou")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000001"),
                            Email = "usuario@exemplo.com",
                            EstaDeletado = false,
                            Funcao = 0,
                            Nome = "Usuário Comum"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000002"),
                            Email = "gerente@exemplo.com",
                            EstaDeletado = false,
                            Funcao = 1,
                            Nome = "Usuário Gerente"
                        });
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.ComentarioTarefa", b =>
                {
                    b.HasOne("Skopia.Domain.Entidades.Tarefa", "Tarefa")
                        .WithMany("Comentarios")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.HistoricoAlteracaoTarefa", b =>
                {
                    b.HasOne("Skopia.Domain.Entidades.Tarefa", "Tarefa")
                        .WithMany("Historico")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Tarefa", b =>
                {
                    b.HasOne("Skopia.Domain.Entidades.Projeto", "Projeto")
                        .WithMany("Tarefas")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Projeto", b =>
                {
                    b.Navigation("Tarefas");
                });

            modelBuilder.Entity("Skopia.Domain.Entidades.Tarefa", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Historico");
                });
#pragma warning restore 612, 618
        }
    }
}
